name: Build and Deploy Frontend

on:
  push:
    branches:
      - dev  # Trigger this workflow on changes to the 'dev' branch
  workflow_dispatch:  # Allow manual triggering of the workflow
jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Check out the repository code

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Set up Node.js version 20

    - name: Install dependencies
      run: npm install  # Install Node.js dependencies

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/task-fe:${{ github.sha }} .  # Build the Docker image for the frontend with the commit SHA as the tag

    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  # Log in to DockerHub

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/task-fe:${{ github.sha }}  # Push the Docker image to DockerHub

  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    needs: build  # Ensure the build job completes before deploying

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Check out the repository code

    - name: Deploy to VPS
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_IP: ${{ secrets.VPS_IP }}
        DOCKER_TAG_FRONTEND: ${{ github.sha }}
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem
        ssh -t -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} << EOF
          cd /home/brian/task-manager

          # Read the current Docker tag from .env
          CURRENT_DOCKER_TAG=$(grep 'DOCKER_TAG_FRONTEND=' .env | cut -d '=' -f 2)
          
          # Remove old Docker image if it exists
          if [ -n "$CURRENT_DOCKER_TAG" ]; then
            docker-compose down
            docker rmi ${{ secrets.DOCKER_USERNAME }}/task-fe:$CURRENT_DOCKER_TAG || true
          fi

          if grep -q "^DOCKER_TAG_FRONTEND=" .env; then
            sed -i "/^DOCKER_TAG_FRONTEND=/c\DOCKER_TAG_FRONTEND=${DOCKER_TAG_FRONTEND}" .env
          else
            echo "DOCKER_TAG_FRONTEND=${DOCKER_TAG_FRONTEND}" >> .env
          fi

          docker-compose pull frontend
          docker-compose up -d frontend
        EOF
